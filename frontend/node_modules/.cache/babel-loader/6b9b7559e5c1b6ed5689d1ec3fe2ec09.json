{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MDMA\\\\Desktop\\\\ass4\\\\frontend\\\\src\\\\components\\\\Nfts.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Nfts(_ref) {\n  _s();\n  let {\n    chain,\n    wallet,\n    filteredNfts,\n    setFilteredNfts,\n    nfts,\n    setNfts\n  } = _ref;\n  const [nameFilter, setNameFilter] = useState(\"\");\n  const [idFilter, setIdFilter] = useState(\"\");\n  async function getUserNfts() {\n    const response = await axios.get(\"http://localhost:8081/nftBalance\", {\n      params: {\n        address: wallet,\n        chain: chain\n      }\n    });\n    if (response.data.result) {\n      nftProcessing(response.data.result);\n    }\n  }\n  function nftProcessing(t) {\n    for (let i = 0; i < t.length; i++) {\n      let meta = JSON.parse(t[i].metadata);\n      if (meta && meta.image) {\n        if (meta.image.includes(\".\")) {\n          t[i].image = meta.image;\n        } else {\n          t[i].image = \"https://ipfs.moralis.io:2053/ipfs/\" + meta.image;\n        }\n      }\n    }\n    setNfts(t);\n    setFilteredNfts(t);\n  }\n  useEffect(() => {\n    if (idFilter.length === 0 && nameFilter.length === 0) {\n      return setFilteredNfts(nfts);\n    }\n    let filNfts = [];\n    for (let i = 0; i < nfts.length; i++) {\n      if (nfts[i].name.toLowerCase().includes(nameFilter) && idFilter.length === 0) {\n        filNfts.push(nfts[i]);\n      } else if (nfts[i].token_id.includes(idFilter) && nameFilter.length === 0) {\n        filNfts.push(nfts[i]);\n      } else if (nfts[i].token_id.includes(idFilter) && nfts[i].name.toLowerCase().includes(nameFilter)) {\n        filNfts.push(nfts[i]);\n      }\n    }\n    setFilteredNfts(filNfts);\n  }, [nameFilter, idFilter]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NFTSSection\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"h1_port\",\n      children: \"Portfolio NFTs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: getUserNfts,\n        children: \"Fetch NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \" Name Filter \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input\",\n          onChange: e => setNameFilter(e.target.value),\n          value: nameFilter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" Id Filter \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setIdFilter(e.target.value),\n        value: idFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this), filteredNfts.length > 0 && filteredNfts.map(e => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [e.image && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: e.image,\n            width: 200\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Name: \", e.name, \", \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"(ID: \", e.token_id, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(Nfts, \"d0J5W15u9YgFxFOtF3+nu942cH8=\");\n_c = Nfts;\nexport default Nfts;\nvar _c;\n$RefreshReg$(_c, \"Nfts\");","map":{"version":3,"names":["React","axios","useState","useEffect","Nfts","chain","wallet","filteredNfts","setFilteredNfts","nfts","setNfts","nameFilter","setNameFilter","idFilter","setIdFilter","getUserNfts","response","get","params","address","data","result","nftProcessing","t","i","length","meta","JSON","parse","metadata","image","includes","filNfts","name","toLowerCase","push","token_id","e","target","value","map"],"sources":["C:/Users/MDMA/Desktop/ass4/frontend/src/components/Nfts.js"],"sourcesContent":["import React from 'react'\r\nimport axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction Nfts({chain, wallet, filteredNfts, setFilteredNfts, nfts, setNfts}) {\r\n  const [nameFilter, setNameFilter] = useState(\"\");\r\n  const [idFilter, setIdFilter] = useState(\"\");\r\n\r\n\r\n  async function getUserNfts() {\r\n    const response = await axios.get(\"http://localhost:8081/nftBalance\", {\r\n      params: {\r\n        address: wallet,\r\n        chain: chain,\r\n      },\r\n    });\r\n\r\n    if (response.data.result) {\r\n      nftProcessing(response.data.result);\r\n    }\r\n  }\r\n\r\n  function nftProcessing(t) {\r\n    for (let i = 0; i < t.length; i++) {\r\n      let meta = JSON.parse(t[i].metadata);\r\n      if (meta && meta.image) {\r\n        if (meta.image.includes(\".\")) {\r\n          t[i].image = meta.image;\r\n        } else {\r\n          t[i].image = \"https://ipfs.moralis.io:2053/ipfs/\" + meta.image;\r\n        }\r\n      }\r\n    }\r\n    setNfts(t);\r\n    setFilteredNfts(t);\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (idFilter.length === 0 && nameFilter.length === 0) {\r\n      return setFilteredNfts(nfts);\r\n    }\r\n\r\n    let filNfts = [];\r\n\r\n    for (let i = 0; i < nfts.length; i++) {\r\n      if (\r\n        nfts[i].name.toLowerCase().includes(nameFilter) &&\r\n        idFilter.length === 0\r\n      ) {\r\n        filNfts.push(nfts[i]);\r\n      } else if (\r\n        nfts[i].token_id.includes(idFilter) &&\r\n        nameFilter.length === 0\r\n      ) {\r\n        filNfts.push(nfts[i]);\r\n      } else if (\r\n        nfts[i].token_id.includes(idFilter) &&\r\n        nfts[i].name.toLowerCase().includes(nameFilter)\r\n      ) {\r\n        filNfts.push(nfts[i]);\r\n      }\r\n    }\r\n\r\n    setFilteredNfts(filNfts);\r\n  }, [nameFilter, idFilter]);\r\n\r\n  return (\r\n    <div className=\"NFTSSection\">\r\n\t\t\t<h1 className='h1_port'>Portfolio NFTs</h1>\r\n    <div>\r\n      <button className='btn' onClick={getUserNfts}>Fetch NFTs</button>\r\n      <p>\r\n        <span> Name Filter </span>\r\n\t\t\t\t<br></br>\r\n        <input className='input'\r\n          onChange={(e) => setNameFilter(e.target.value)}\r\n          value={nameFilter}\r\n        ></input>\r\n      </p>\r\n      <span> Id Filter </span>\r\n\t\t\t<br></br>\r\n      <input\r\n        onChange={(e) => setIdFilter(e.target.value)}\r\n        value={idFilter}\r\n      ></input>\r\n      <br />\r\n      {filteredNfts.length > 0 &&\r\n        filteredNfts.map((e) => {\r\n          return (\r\n            <>\r\n              {e.image && <img src={e.image} width={200} />}\r\n              <span>Name: {e.name}, </span>\r\n              <span>(ID: {e.token_id})</span>\r\n              <br />\r\n            </>\r\n          );\r\n        })}\r\n    </div>\r\n\t\t</div>\r\n  )\r\n}\r\n\r\nexport default Nfts"],"mappings":"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"},"metadata":{},"sourceType":"module"}